
orchid {
    includeMainConfiguration = true
    runTask = "${project.ext.commonRunTask}"
    version = "${project.version}"
    theme   = "${project.ext.commonThemeClass}"

    if(project.hasProperty('env')) {
        println "setting baseUrl from env (${project.property('env')}): ${project.ext.commonBaseUrl}/${project.version}/${project.name}"
        switch(project.property('env')) {
            case 'prod':
                baseUrl = "${project.ext.commonBaseUrl}/${project.version}/${project.name}"
                break
            case 'staging':
                baseUrl = "${project.ext.commonBaseUrl}/${project.version}/${project.name}"
                break
            case 'dev':
                baseUrl = "${project.ext.commonBaseUrl}"
                break
        }
    }
    else {
        baseUrl = "${project.ext.commonBaseUrl}"
        println "setting default baseUrl: ${project.ext.commonBaseUrl}"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task publishDocumentation {
    dependsOn 'javadoc'

    def source       = file("$buildDir/docs/javadoc")
    def dest_latest  = file("$rootDir/docs/latest/${project.name}")
    def dest_version = file("$rootDir/docs/${project.version}/${project.name}")

    inputs.dir(source)
    outputs.dir(dest_latest)
    outputs.dir(dest_version)

    doLast {
        copy {
            from source
            into dest_latest
        }
        copy {
            from source
            into dest_version
        }
    }
}

rootProject.tasks.deploy.dependsOn project.tasks.publishDocumentation