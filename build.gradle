// Configure build, dependencies, output jar, and Java compatibility
//------------------------------------------------------------------------------

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath "org.ajoberstar:gradle-git:1.7.2"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'idea'
apply plugin: 'com.github.ben-manes.versions'

version = 'v0.4.2'

// Define the 'types' of projects Orchid is working with
//      coreProject - the main core module required by every other Orchid extension
//      themeProjects - Orchid themes, required to actually use Orchid by all other projects
//      pluginProjects - Additional functionality to add to Orchid, none of which are required by any project
//      bundleProjects - Groups of plugins and themes intended to make it easy to get set up with a fully-configured
//              Orchid environment with a single dependency artifact.
//      mainProjects - The aggregate of core, theme, and plugin groups. Includes all packages which contain sources.
//              Excludes 'empty projects' like ':themes' and ':plugins', as well as the root project and 'buildSrc'
ext.coreProject    = subprojects.findAll { return (it.name == "OrchidCore") }
ext.themeProjects  = subprojects.findAll { return (it.path.startsWith(":themes"))  && (it.name != "themes") }
ext.pluginProjects = subprojects.findAll { return (it.path.startsWith(":plugins")) && (it.name != "plugins") }
ext.bundleProjects = subprojects.findAll { return (it.path.startsWith(":bundles")) && (it.name != "bundles") }
ext.mainProjects   = coreProject + themeProjects + pluginProjects

task publishDocumentation {

}

task deploy {

    dependsOn publishDocumentation

    onlyIf {
        if (project.hasProperty('env') && project.property('env') == 'prod') {
            return true
        }
        else {
            println ':deploy task must be run in prod environment (-Penv=prod)'
            return false
        }
    }

    doLast {
        // go to gh-pages branch, remove 'latest' folder, copy generated docs into root, then commit and push
        grgit.checkout(branch: 'gh-pages')
        delete "$rootDir/latest"
        copy {
            from "$rootDir/docs"
            into "$rootDir"
        }

        grgit.add(patterns: ['latest', "${rootProject.version}"])
        grgit.commit(message: "Updates docs to '${rootProject.version}'")
        System.setProperty("org.ajoberstar.grgit.auth.username", project.properties['github_username'])
        System.setProperty("org.ajoberstar.grgit.auth.password", project.properties['github_password'])
        grgit.push()

        // go back to master branch, tag this release, then push the tag
        grgit.checkout(branch: 'master')
//        grgit.tag.add(name: "${rootProject.version}", message: "Deployed Orchid ${rootProject.version}", force: true)
//        grgit.push(tags: true)
    }
}

configure(ext.mainProjects)   { apply from: "$rootDir/gradle/mainProjects.gradle" }
configure(ext.themeProjects)  { apply from: "$rootDir/gradle/themeProjects.gradle" }
configure(ext.pluginProjects) { apply from: "$rootDir/gradle/pluginProjects.gradle" }
configure(ext.bundleProjects) { apply from: "$rootDir/gradle/bundleProjects.gradle" }