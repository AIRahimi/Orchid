// Configure build, dependencies, output jar, and Java compatibility
//------------------------------------------------------------------------------

buildscript {
    repositories {
        flatDir dirs: '../OrchidGradlePlugin/build/libs'
    }
    dependencies {
        classpath 'com.eden:OrchidGradlePlugin:v0.1.0'
    }
}
plugins {
    id 'java'
    id 'jacoco'
    id 'org.ajoberstar.grgit' version '1.6.0'
    id 'org.ajoberstar.github-pages' version '1.6.0'
//    id "com.eden.orchidplugin" version "v0.1.0"
}

apply plugin: 'com.eden.orchidplugin'

group 'com.eden'
version = 'v0.1.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

sourceSets {
    orchidDocs
}

repositories {
    maven { url 'http://jcenter.bintray.com/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Unit testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    // enable processing JavaDoc
    compile files(org.gradle.internal.jvm.Jvm.current().toolsJar)

    // core JavaEden utilities
    compile 'com.github.JavaEden:Common:64f41c1f66'

    // Enable auto-registration of plugins and themes
    compile 'io.github.lukehutch:fast-classpath-scanner:2.0.9'

    // For matching files
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'fr.opensagres.js:minimatch.java:1.1.0'

    // Included basic parsers: JSON, YAML, Twig, Markdown
    compile 'org.json:json:20160810'
    compile 'org.yaml:snakeyaml:1.17'
    compile 'org.jtwig:jtwig-core:5.65'
    compile 'com.vladsch.flexmark:flexmark:0.7.0'
    compile 'ch.qos.logback:logback-classic:0.9.26'

    // automatically retrieve additional classes from other Orchid documentation sites
    compile 'com.squareup.okhttp3:okhttp:3.5.0'

    // Logging
    compile 'com.github.cjbrooks12:Clog:v1.2.3'

    // generate own documentation with specific theme
    orchidDocsCompile('com.github.JavaEden:OrchidEditorialTheme:a2f38b1d8d') {
        exclude group: 'com.github.JavaEden', module: 'OrchidCore'
    }
//    orchidDocsCompile('com.github.JavaEden:OrchidBsDocTheme:5c3eca804e') {
//        exclude group: 'com.github.JavaEden', module: 'OrchidCore'
//    }
    orchidDocsCompile('com.github.JavaEden:OrchidWiki:b25d3082c1') {
        exclude group: 'com.github.JavaEden', module: 'OrchidCore'
    }
    orchidDocsCompile('com.github.JavaEden:OrchidPages:740cde8c9e') {
        exclude group: 'com.github.JavaEden', module: 'OrchidCore'
    }
    orchidDocsCompile('com.github.JavaEden:OrchidPosts:a175c3cb80') {
        exclude group: 'com.github.JavaEden', module: 'OrchidCore'
    }
}

// Jacoco Code Coverage
//------------------------------------------------------------------------------
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport

// Javadoc Generation
//------------------------------------------------------------------------------
orchid {
//    cmdArgs.add("listOptions")
    cmdArgs.add("listPrograms")

    version = this.version
    theme = 'com.eden.orchid.editorial.EditorialTheme'
    baseUrl = 'http://localhost:8080'
    srcDir = sourceSets.orchidDocs.resources.srcDirs[0].toString()
    destDir = '/Users/cbrooks/Documents/personal/java/eden/OrchidCore/build/docs/javadoc'

    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.orchidDocs.runtimeClasspath
}

javadoc {
    title = ""
    source = sourceSets.main.allJava

    options.docletpath = [file("build/libs/OrchidCore-${version}.jar")]
    options.docletpath.addAll(configurations.compile)
    options.docletpath.addAll(configurations.orchidDocsCompile)
    options.doclet = 'com.eden.orchid.Orchid'

    options.addStringOption("theme", "com.eden.orchid.editorial.EditorialTheme")
//    options.addStringOption("theme", "com.eden.orchid.bsdoc.BSDocTheme")
    options.addStringOption("resourcesDir", sourceSets.orchidDocs.resources.srcDirs[0].toString())

    options.addStringOption("v", version)
//    options.addStringOption("baseUrl", "http://localhost:8080")
    options.addStringOption("baseUrl", "https://javaeden.github.io/OrchidCore/editorial")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Tagging, Releases, and Github Pages Publishing
task setGitReleaseTag {
    doLast {
        if ((grgit.tag.list().findAll { item -> item.name.equals(version) }).size() > 0) {
            println "Version '${version}' is already tagged"
        } else {
            println "Tagging repo with version: ${version}."
            grgit.tag.add {
                name = version
                message = "Updates to version ${version}"
            }
        }
    }
}

prepareGhPages.outputs.upToDateWhen { false }
publishGhPages.outputs.upToDateWhen { false }

githubPages {
    pages {
        from javadoc
        into ""
    }
}

task release {

}

tasks.javadoc.dependsOn 'classes'

tasks.release.dependsOn 'build', 'setGitReleaseTag', 'publishGhPages'

//task runOrchid(type: JavaExec) {
//    main = 'com.eden.orchid.Orchid'
//    classpath += sourceSets.main.runtimeClasspath
//    classpath += sourceSets.orchidDocs.runtimeClasspath
//
//    args += '-baseUrl http://localhost:8080'
//    args += '-theme com.eden.orchid.bsdoc.BSDocTheme'
//    args += '-d /Users/cbrooks/Documents/personal/java/eden/OrchidCore/build/docs/javadoc'
//    args += '-resourcesDir /Users/cbrooks/Documents/personal/java/eden/OrchidCore/src/orchidDocs/resources'
//    args += '-v v0.1.0'
//}

