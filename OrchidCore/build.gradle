apply plugin: 'java-library'

dependencies {
    testImplementation 'org.testng:testng:6.11'

    // Dynamic Component Registration
    api 'com.google.inject:guice:4.1.0'
    api 'com.google.inject.extensions:guice-multibindings:4.1.0'
    api 'io.github.lukehutch:fast-classpath-scanner:2.4.7'

    // core utilities
    api 'com.github.JavaEden:Common:aa28e2b745'
    api 'com.github.JavaEden:Clog:v1.6.1'
    api 'com.github.JavaEden:Clog4j:v1.6.1'
    api 'org.projectlombok:lombok:1.16.18'
    api 'com.squareup.okhttp3:okhttp:3.9.0'
    api 'commons-io:commons-io:2.5'

    // Included parsers: JSON, YAML, Twig, Markdown, Sass
    api 'org.json:json:20170516'
    api 'org.jtwig:jtwig-core:5.86.1.RELEASE'
    api 'org.yaml:snakeyaml:1.18'
    api 'com.vladsch.flexmark:flexmark-all:0.26.4'
    api 'io.bit3:jsass:5.5.3'

    // server
    api 'org.nanohttpd:nanohttpd:2.3.1'
    api 'org.nanohttpd:nanohttpd-websocket:2.3.1'

    // generate own documentation with Orchid
    orchidDocsRuntime rootProject.ext.mainProjects
}

static boolean otherProjectsTask(Task task, String taskName) {
    return !task.path.startsWith(':OrchidCore') && task.path.endsWith(":${taskName}")
}

project.parent.subprojects.each { subproject ->
    project.tasks.javadoc.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }
    project.tasks.orchidRun.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }

    project.tasks.javadoc.shouldRunAfter subproject.tasks.matching { task -> otherProjectsTask(task, 'javadoc') }
}