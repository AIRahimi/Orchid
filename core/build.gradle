
plugins {
    id 'java'
    id 'jacoco'
    id 'com.eden.orchidplugin' version 'v0.1.6'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    // Unit testing
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    compile files(org.gradle.internal.jvm.Jvm.current().toolsJar)

    // Dynamic Component Registration
    compile 'com.google.inject:guice:4.1.0'
    compile 'com.google.inject.extensions:guice-multibindings:4.1.0'
    compile 'io.github.lukehutch:fast-classpath-scanner:2.0.9'

    // core utilities
    compile 'com.github.JavaEden:Common:74714dca1f'
    compile 'com.github.JavaEden:Clog4j:v1.3.0'
    compile 'com.squareup.okhttp3:okhttp:3.5.0'
    compile 'org.projectlombok:lombok:1.16.12'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'fr.opensagres.js:minimatch.java:1.1.0'

    // Included parsers: JSON, YAML, Twig, Markdown
    compile 'org.json:json:20160810'
    compile 'org.yaml:snakeyaml:1.17'
    compile 'org.jtwig:jtwig-core:5.65'
    compile 'com.vladsch.flexmark:flexmark:0.7.0'
    compile 'io.bit3:jsass:5.3.1'

    // generate own documentation with Orchid
    orchidDocsCompile project(":core")

    orchidDocsCompile project(":themes:BsDoc")
    orchidDocsCompile project(":themes:Editorial")

    orchidDocsCompile project(":plugins:Pages")
    orchidDocsCompile project(":plugins:Posts")
    orchidDocsCompile project(":plugins:Wiki")
    orchidDocsCompile project(":plugins:Server")
}

orchid {
    includeMainConfiguration = true
//    task = "listCompilers"
//    task = "listGenerators"
//    task = "listOptions"
//    task = "listSources"
//    task = "listTasks"
//    task = "listThemes"
//    task = "build"
    task = "serve"

//    theme = 'com.eden.orchid.editorial.EditorialTheme'
    theme = 'com.eden.orchid.bsdoc.BSDocTheme'
    version = this.version
    baseUrl = 'http://localhost:8080'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}